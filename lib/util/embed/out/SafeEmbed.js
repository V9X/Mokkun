"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const discord_js_1 = require("discord.js");
class SafeEmbed extends discord_js_1.MessageEmbed {
    constructor(data) {
        super(data);
        this.overFields = [];
    }
    shortenFields() {
        if (this.fields.length >= SafeEmbed.max.fields) {
            let over = this.fields.slice(SafeEmbed.max.fields);
            this.fields = this.fields.slice(0, SafeEmbed.max.fields);
            this.overFields.push(...over);
        }
    }
    setAuthor(name, iconURL, url) {
        name = discord_js_1.Util.resolveString(name).slice(0, SafeEmbed.max.author);
        return super.setAuthor(name, iconURL, url);
    }
    setDescription(description) {
        description = discord_js_1.Util.resolveString(description).slice(0, SafeEmbed.max.description);
        return super.setDescription(description);
    }
    setTitle(title) {
        title = discord_js_1.Util.resolveString(title).slice(0, SafeEmbed.max.title);
        return super.setTitle(title);
    }
    setFooter(text, iconURL) {
        text = discord_js_1.Util.resolveString(text).slice(0, SafeEmbed.max.footerText);
        return super.setFooter(text, iconURL);
    }
    addFields(...fields) {
        super.addFields(...fields);
        this.shortenFields();
        return this;
    }
    spliceFields(index, deleteCount, ...fields) {
        super.spliceFields(index, deleteCount, ...fields);
        this.shortenFields();
        return this;
    }
    static normalizeField(name, value, inline) {
        name = discord_js_1.Util.resolveString(name).slice(0, SafeEmbed.max.fieldName);
        value = discord_js_1.Util.resolveString(value).slice(0, SafeEmbed.max.fieldValue);
        return super.normalizeField(name, value, inline);
    }
    static normalizeFields(...fields) {
        return super.normalizeFields(...fields).slice(0, SafeEmbed.max.fields);
    }
}
exports.SafeEmbed = SafeEmbed;
SafeEmbed.max = {
    author: 256,
    description: 2048,
    title: 256,
    footerText: 2048,
    fields: 25,
    fieldName: 256,
    fieldValue: 1024
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2FmZUVtYmVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vbGliL1NhZmVFbWJlZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJDQUFtSDtBQUVuSCxNQUFhLFNBQVUsU0FBUSx5QkFBWTtJQWF2QyxZQUFZLElBQXlDO1FBQ2pELEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQWJoQixlQUFVLEdBQWtCLEVBQUUsQ0FBQztJQWMvQixDQUFDO0lBRU8sYUFBYTtRQUNqQixJQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxJQUFJLFNBQVMsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFO1lBQzNDLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDbkQsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN6RCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO1NBQ2pDO0lBQ0wsQ0FBQztJQUVELFNBQVMsQ0FBQyxJQUFzQixFQUFFLE9BQWdCLEVBQUUsR0FBWTtRQUM1RCxJQUFJLEdBQUcsaUJBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQy9ELE9BQU8sS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFRCxjQUFjLENBQUMsV0FBNkI7UUFDeEMsV0FBVyxHQUFHLGlCQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNsRixPQUFPLEtBQUssQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVELFFBQVEsQ0FBQyxLQUF1QjtRQUM1QixLQUFLLEdBQUcsaUJBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2hFLE9BQU8sS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRUQsU0FBUyxDQUFDLElBQXNCLEVBQUUsT0FBZ0I7UUFDOUMsSUFBSSxHQUFHLGlCQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNuRSxPQUFPLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRCxTQUFTLENBQUMsR0FBRyxNQUE2QztRQUN0RCxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUM7UUFDM0IsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ3JCLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxZQUFZLENBQUMsS0FBYSxFQUFFLFdBQW1CLEVBQUUsR0FBRyxNQUE2QztRQUM3RixLQUFLLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxXQUFXLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDckIsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVELE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBc0IsRUFBRSxLQUF1QixFQUFFLE1BQWdCO1FBQ25GLElBQUksR0FBRyxpQkFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDbEUsS0FBSyxHQUFHLGlCQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNyRSxPQUFPLEtBQUssQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQsTUFBTSxDQUFDLGVBQWUsQ0FBQyxHQUFHLE1BQTZDO1FBQ25FLE9BQU8sS0FBSyxDQUFDLGVBQWUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMzRSxDQUFDOztBQWpFTCw4QkFrRUM7QUEvRFUsYUFBRyxHQUFHO0lBQ1QsTUFBTSxFQUFFLEdBQUc7SUFDWCxXQUFXLEVBQUUsSUFBSTtJQUNqQixLQUFLLEVBQUUsR0FBRztJQUNWLFVBQVUsRUFBRSxJQUFJO0lBQ2hCLE1BQU0sRUFBRSxFQUFFO0lBQ1YsU0FBUyxFQUFFLEdBQUc7SUFDZCxVQUFVLEVBQUUsSUFBSTtDQUNuQixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWVzc2FnZUVtYmVkLCBTdHJpbmdSZXNvbHZhYmxlLCBVdGlsLCBNZXNzYWdlRW1iZWRPcHRpb25zLCBFbWJlZEZpZWxkRGF0YSwgRW1iZWRGaWVsZCB9IGZyb20gJ2Rpc2NvcmQuanMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNhZmVFbWJlZCBleHRlbmRzIE1lc3NhZ2VFbWJlZCB7XHJcbiAgICBvdmVyRmllbGRzIDogRW1iZWRGaWVsZFtdID0gW107XHJcblxyXG4gICAgc3RhdGljIG1heCA9IHtcclxuICAgICAgICBhdXRob3I6IDI1NixcclxuICAgICAgICBkZXNjcmlwdGlvbjogMjA0OCxcclxuICAgICAgICB0aXRsZTogMjU2LFxyXG4gICAgICAgIGZvb3RlclRleHQ6IDIwNDgsXHJcbiAgICAgICAgZmllbGRzOiAyNSxcclxuICAgICAgICBmaWVsZE5hbWU6IDI1NixcclxuICAgICAgICBmaWVsZFZhbHVlOiAxMDI0XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGNvbnN0cnVjdG9yKGRhdGE/OiBNZXNzYWdlRW1iZWQgfCBNZXNzYWdlRW1iZWRPcHRpb25zKSB7XHJcbiAgICAgICAgc3VwZXIoZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzaG9ydGVuRmllbGRzKCkge1xyXG4gICAgICAgIGlmKHRoaXMuZmllbGRzLmxlbmd0aCA+PSBTYWZlRW1iZWQubWF4LmZpZWxkcykge1xyXG4gICAgICAgICAgICBsZXQgb3ZlciA9IHRoaXMuZmllbGRzLnNsaWNlKFNhZmVFbWJlZC5tYXguZmllbGRzKTtcclxuICAgICAgICAgICAgdGhpcy5maWVsZHMgPSB0aGlzLmZpZWxkcy5zbGljZSgwLCBTYWZlRW1iZWQubWF4LmZpZWxkcyk7XHJcbiAgICAgICAgICAgIHRoaXMub3ZlckZpZWxkcy5wdXNoKC4uLm92ZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzZXRBdXRob3IobmFtZTogU3RyaW5nUmVzb2x2YWJsZSwgaWNvblVSTD86IHN0cmluZywgdXJsPzogc3RyaW5nKSB7XHJcbiAgICAgICAgbmFtZSA9IFV0aWwucmVzb2x2ZVN0cmluZyhuYW1lKS5zbGljZSgwLCBTYWZlRW1iZWQubWF4LmF1dGhvcik7XHJcbiAgICAgICAgcmV0dXJuIHN1cGVyLnNldEF1dGhvcihuYW1lLCBpY29uVVJMLCB1cmwpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldERlc2NyaXB0aW9uKGRlc2NyaXB0aW9uOiBTdHJpbmdSZXNvbHZhYmxlKSB7XHJcbiAgICAgICAgZGVzY3JpcHRpb24gPSBVdGlsLnJlc29sdmVTdHJpbmcoZGVzY3JpcHRpb24pLnNsaWNlKDAsIFNhZmVFbWJlZC5tYXguZGVzY3JpcHRpb24pO1xyXG4gICAgICAgIHJldHVybiBzdXBlci5zZXREZXNjcmlwdGlvbihkZXNjcmlwdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0VGl0bGUodGl0bGU6IFN0cmluZ1Jlc29sdmFibGUpIHtcclxuICAgICAgICB0aXRsZSA9IFV0aWwucmVzb2x2ZVN0cmluZyh0aXRsZSkuc2xpY2UoMCwgU2FmZUVtYmVkLm1heC50aXRsZSk7XHJcbiAgICAgICAgcmV0dXJuIHN1cGVyLnNldFRpdGxlKHRpdGxlKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRGb290ZXIodGV4dDogU3RyaW5nUmVzb2x2YWJsZSwgaWNvblVSTD86IHN0cmluZykge1xyXG4gICAgICAgIHRleHQgPSBVdGlsLnJlc29sdmVTdHJpbmcodGV4dCkuc2xpY2UoMCwgU2FmZUVtYmVkLm1heC5mb290ZXJUZXh0KTtcclxuICAgICAgICByZXR1cm4gc3VwZXIuc2V0Rm9vdGVyKHRleHQsIGljb25VUkwpO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZEZpZWxkcyguLi5maWVsZHM6IEVtYmVkRmllbGREYXRhW10gfCBFbWJlZEZpZWxkRGF0YVtdW10pIHtcclxuICAgICAgICBzdXBlci5hZGRGaWVsZHMoLi4uZmllbGRzKTtcclxuICAgICAgICB0aGlzLnNob3J0ZW5GaWVsZHMoKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBzcGxpY2VGaWVsZHMoaW5kZXg6IG51bWJlciwgZGVsZXRlQ291bnQ6IG51bWJlciwgLi4uZmllbGRzOiBFbWJlZEZpZWxkRGF0YVtdIHwgRW1iZWRGaWVsZERhdGFbXVtdKSB7XHJcbiAgICAgICAgc3VwZXIuc3BsaWNlRmllbGRzKGluZGV4LCBkZWxldGVDb3VudCwgLi4uZmllbGRzKTtcclxuICAgICAgICB0aGlzLnNob3J0ZW5GaWVsZHMoKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgbm9ybWFsaXplRmllbGQobmFtZTogU3RyaW5nUmVzb2x2YWJsZSwgdmFsdWU6IFN0cmluZ1Jlc29sdmFibGUsIGlubGluZT86IGJvb2xlYW4pIHtcclxuICAgICAgICBuYW1lID0gVXRpbC5yZXNvbHZlU3RyaW5nKG5hbWUpLnNsaWNlKDAsIFNhZmVFbWJlZC5tYXguZmllbGROYW1lKTtcclxuICAgICAgICB2YWx1ZSA9IFV0aWwucmVzb2x2ZVN0cmluZyh2YWx1ZSkuc2xpY2UoMCwgU2FmZUVtYmVkLm1heC5maWVsZFZhbHVlKTtcclxuICAgICAgICByZXR1cm4gc3VwZXIubm9ybWFsaXplRmllbGQobmFtZSwgdmFsdWUsIGlubGluZSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIG5vcm1hbGl6ZUZpZWxkcyguLi5maWVsZHM6IEVtYmVkRmllbGREYXRhW10gfCBFbWJlZEZpZWxkRGF0YVtdW10pIHtcclxuICAgICAgICByZXR1cm4gc3VwZXIubm9ybWFsaXplRmllbGRzKC4uLmZpZWxkcykuc2xpY2UoMCwgU2FmZUVtYmVkLm1heC5maWVsZHMpO1xyXG4gICAgfVxyXG59Il19